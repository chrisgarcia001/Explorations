from os import sys
sys.path.insert(0, '../src/')
from data_gen import *

b = DataGenerator()
b.set_baseline_response_prob(0.02)
b.add_user_attr('Gender', ['M', 'F'])
#b.add_user_attr('Age', ['0-18', '18-34', '35-50', '50-65', '>= 65'])
b.add_user_attr('Age', (0, 100))
b.add_user_attr('Education', ['HS', 'Assoc', 'Bachelors', 'Masters', 'Doctorate'])
b.add_inter_attr('Tone', ['Funny', 'Factual', 'Compassionate'])
b.add_inter_attr('Channel', ['Twitter', 'Facebook', 'Email'])
b.add_inter_attr('Sender', ['Friend', 'Politician', 'Business Leader', 'Famous Actor'])
b.add_inter_attr('Theme', ['Environment', 'Music', 'Business', 'Economy', 'Sports'])
b.set_propensity({'Age':'18-34', 'Theme':'Environment'}, 0.22)
b.set_propensity({'Gender':'M', 'Theme':'Sports', 'Tone':'Funny'}, 0.31)
b.set_propensity({'Gender':'F', 'Music':'Sports', 'Sender':'Famous Actor'}, 0.25)
rows = b.gen_random_rows(10000)
(tusers, tinters, tresp) = rows
users = b.gen_random_users(1000)
print(sum(tresp))
print((len(tusers), len(tinters), len(tresp)))
print(users[:5])
print(b.matches_template({'Tone':'Funny'}, b.inter_attrs, ['Funny', 'Email', 'Friend', 'Music']))
print(b.matches_template({'Tone':'Funny','Sender':'Friend'}, b.inter_attrs, ['Funny', 'Email', 'Friend', 'Music']))
print(b.matches_template({'Tone':'Funny','Sender':'Politician'}, b.inter_attrs, ['Funny', 'Email', 'Friend', 'Music']))
print(b.matches_template({'Tone':'Factual'}, b.inter_attrs, ['Funny', 'Email', 'Friend', 'Music']))
print("---Random from Template:")
print(b.gen_random_user_from_template({'Education':'Assoc'}))
print(b.gen_random_inter_from_template({'Channel':'Twitter', 'Tone':'Funny'}))
ru = b.gen_random_users(5, [({'Education':'Assoc'}, 5)])
ri = b.gen_random_inters(5, [({'Channel':'Twitter', 'Tone':'Funny'}, 5)])
print("----")
print("---Crossprod Rows:")
print(b.gen_crossprod_rows(ru, ri))
print("----")
print(b.gen_random_attrs("T", 2, 2, 6, 2, 1, 3, 6, 10))

b = DataGenerator()
b.add_random_user_attrs(5, 2, 6)
b.add_random_inter_attrs(5, 2, 6)
print(b.user_attrs)
print(b.inter_attrs)
x = b.set_random_propensities(4, 2, 5, 2, 5, 0.2, 0.6)
print(b.propensities)
print(x)

b = DataGenerator()
b.set_baseline_response_prob(0.02)
b.add_user_attr('A', ['x','y','z'])
b.add_user_attr('B', ['p','q','r'])
b.add_inter_attr('C', ['u','v','w'])
b.add_inter_attr('D', ['r','s','t'])
b.set_propensity({'A':'x','C':'u'}, 0.2)
b.set_propensity({'A':'x','C':'u','D':'s'}, 0.8)
u1 = b.gen_random_user_from_template({'A':'x'})
u2 = b.gen_random_user_from_template({'A':'y'})
i1 = b.gen_random_inter_from_template({'C':'u'})
i2 = b.gen_random_inter_from_template({'C':'u','D':'s'})
i3 = b.gen_random_inter_from_template({'C':'v'})
r1 = sum(map(lambda x: b.gen_response(u1, i1), range(100)))
r2 = sum(map(lambda x: b.gen_response(u1, i2), range(100)))
r3 = sum(map(lambda x: b.gen_response(u1, i3), range(100)))
r4 = sum(map(lambda x: b.gen_response(u2, i1), range(100)))
r5 = sum(map(lambda x: b.gen_response(u2, i2), range(100)))
print(u1)
print(u2)
print(i1)
print(i2)
print(i3)
print((r1, r2, r3 ,r4, r5)) # Should be approx. (20, 80, 2, 2, 2)

for v in range(10):
	print('---A:x, B:p---')
	print(b.gen_random_user_from_template({'A':'x','B':'p'}))
	print('---C:u, D:s---')
	print(b.gen_random_inter_from_template({'C':'u','D':'s'}))
	
print('---A:x, C:u---')
print(b.gen_random_rows_from_template({'A':'x'},{'C':'u'},10))
